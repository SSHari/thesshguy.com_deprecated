/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  '/Demos': {
    get: {
      parameters: {
        query: {
          demo_id?: parameters['rowFilter.Demos.demo_id'];
          created_at?: parameters['rowFilter.Demos.created_at'];
          content?: parameters['rowFilter.Demos.content'];
          updated_at?: parameters['rowFilter.Demos.updated_at'];
          title?: parameters['rowFilter.Demos.title'];
          demo_slug?: parameters['rowFilter.Demos.demo_slug'];
          user_id?: parameters['rowFilter.Demos.user_id'];
          is_published?: parameters['rowFilter.Demos.is_published'];
          /** Path to Github TIL Entry */
          til_link?: parameters['rowFilter.Demos.til_link'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['Demos'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Demos */
          Demos?: definitions['Demos'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          demo_id?: parameters['rowFilter.Demos.demo_id'];
          created_at?: parameters['rowFilter.Demos.created_at'];
          content?: parameters['rowFilter.Demos.content'];
          updated_at?: parameters['rowFilter.Demos.updated_at'];
          title?: parameters['rowFilter.Demos.title'];
          demo_slug?: parameters['rowFilter.Demos.demo_slug'];
          user_id?: parameters['rowFilter.Demos.user_id'];
          is_published?: parameters['rowFilter.Demos.is_published'];
          /** Path to Github TIL Entry */
          til_link?: parameters['rowFilter.Demos.til_link'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          demo_id?: parameters['rowFilter.Demos.demo_id'];
          created_at?: parameters['rowFilter.Demos.created_at'];
          content?: parameters['rowFilter.Demos.content'];
          updated_at?: parameters['rowFilter.Demos.updated_at'];
          title?: parameters['rowFilter.Demos.title'];
          demo_slug?: parameters['rowFilter.Demos.demo_slug'];
          user_id?: parameters['rowFilter.Demos.user_id'];
          is_published?: parameters['rowFilter.Demos.is_published'];
          /** Path to Github TIL Entry */
          til_link?: parameters['rowFilter.Demos.til_link'];
        };
        body: {
          /** Demos */
          Demos?: definitions['Demos'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  /** @description MDX for demos related to TILs */
  Demos: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    demo_id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /** Format: text */
    content: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
    /** Format: text */
    title: string;
    /** Format: text */
    demo_slug: string;
    /** Format: uuid */
    user_id: string;
    /** Format: boolean */
    is_published: boolean;
    /**
     * Format: text
     * @description Path to Github TIL Entry
     */
    til_link: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: 'params=single-object';
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: 'return=representation' | 'return=minimal' | 'return=none';
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: 'count=none';
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description Demos */
  'body.Demos': definitions['Demos'];
  /** Format: bigint */
  'rowFilter.Demos.demo_id': string;
  /** Format: timestamp with time zone */
  'rowFilter.Demos.created_at': string;
  /** Format: text */
  'rowFilter.Demos.content': string;
  /** Format: timestamp with time zone */
  'rowFilter.Demos.updated_at': string;
  /** Format: text */
  'rowFilter.Demos.title': string;
  /** Format: text */
  'rowFilter.Demos.demo_slug': string;
  /** Format: uuid */
  'rowFilter.Demos.user_id': string;
  /** Format: boolean */
  'rowFilter.Demos.is_published': string;
  /**
   * Format: text
   * @description Path to Github TIL Entry
   */
  'rowFilter.Demos.til_link': string;
}

export interface operations {}

export interface external {}
